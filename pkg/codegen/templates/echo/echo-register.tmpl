

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

type ServerOptions struct {
	baseURL           string
	SecurityValidator func(echo.Context, string, []string) error
}

var DefaultServerOptions = ServerOptions{
    baseURL:           "",
    SecurityValidator: func(ctx echo.Context, scope string, roles []string) error { return nil },
}

func RegisterHandlers(router EchoRouter, si ServerInterface) {
    RegisterHandlersWithOptions(router, si, DefaultServerOptions)
}

func RegisterHandlersWithOptions(router EchoRouter, si ServerInterface, options ServerOptions) {

    if options.SecurityValidator == nil {
        options.SecurityValidator = DefaultServerOptions.SecurityValidator
    }

{{if .}}
    wrapper := ServerInterfaceWrapper{
        Handler: si,
        Options: options,
    }
{{end}}
{{range .}}router.{{.Method}}(options.baseURL + "{{.Path | swaggerUriToEchoUri}}", wrapper.{{.OperationId}})
{{end}}
}
